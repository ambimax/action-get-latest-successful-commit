import * as fs from "fs";
import * as YAML from "yaml";

const rootDir = `${__dirname}/..`;
const srcDir = `${rootDir}/src`;
const repository = "ambimax/action-get-latest-successful-commit";
const versionTag = "v1";

const action = YAML.parse(fs.readFileSync(`${rootDir}/action.yml`).toString());

generateCode();
generateReadme();

function generateCode(): void {
    let code = `// This file was autogenerated.
    import core from "@actions/core";

    export interface InputParameters {`;

    for (const name in action.inputs) {
        const input = action.inputs[name];

        code += `
        /**
         * ${input.description}
         */
        ${name}${input.required || input.default !== undefined ? "" : "?"}: string;`;
    }

    code += `
    }

    export function getInputParameters(): InputParameters {
        return {`;

    for (const name in action.inputs) {
        const input = action.inputs[name];

        code += `
            ${name}: core.getInput(${JSON.stringify(name)}, { required: ${!!input.required} })${
            !input.required ? ` || ${JSON.stringify(input.default)}` : ""
        },`;
    }

    code += `
        };
    }
    `;

    fs.writeFileSync(`${srcDir}/autogen.ts`, code);
}

function generateReadme(): void {
    let readme = fs.readFileSync(`${rootDir}/README.md`).toString();

    readme = replaceMarkdownRegion(
        readme,
        "parameters",
        `| Name | description | required | default |
|-|-|-|-|
${Object.keys(action.inputs)
    .map(
        (key) =>
            `| ${key} | ${action.inputs[key].description.replace(/\n/g, "<br>")} | ${!!action.inputs[key].required} | ${
                action.inputs[key].default ?? ""
            } |`,
    )
    .join("\n")}`,
    );

    const examplesDirectory = `${__dirname}/../examples`;
    const examples = fs.readdirSync(examplesDirectory);

    readme = replaceMarkdownRegion(
        readme,
        "examples",
        examples
            .map((example) => {
                const inputs = YAML.parse(fs.readFileSync(`${examplesDirectory}/${example}/inputs.yml`).toString());

                return `### [${example.slice(3)}](example/${example})
${inputs.description}
\`\`\`yml
${YAML.stringify({
    jobs: {
        test: {
            steps: [
                Object.assign(
                    {
                        uses: `${repository}@${versionTag}`,
                    },
                    ...(Object.keys(inputs.with).length > 0 ? [{ with: inputs.with }] : []),
                ),
            ],
        },
    },
}).slice(25, -1)}
\`\`\``;
            })
            .join("\n\n"),
    );

    fs.writeFileSync(`${rootDir}/README.md`, readme);
}

/**
 * Replaces a region in a markdown file.
 *
 * @param input The input to replace the region in.
 * @param name The name of the region.
 * @param value The value to set the region to.
 *
 * @example const input = `
 *          # Hello world
 *          <!-- region:helloworld start -->
 *          <!-- region:helloworld end -->
 *          This is just an example.
 *          `;
 *
 *          const output = replaceMarkdownRegion(input, "helloworld", "Hello!");
 *
 *          const expectedOutput = `
 *          # Hello world
 *          <!-- region:helloworld start -->
 *          Hello!
 *          <!-- region:helloworld end -->
 *          This is just an example.
 *          `;
 */
function replaceMarkdownRegion(input: string, name: string, value: string): string {
    const startMatch = new RegExp(`<!--\\s+region:${name}\\s+start\\s+-->`).exec(input);
    const start = startMatch ? startMatch.index + startMatch[0].length : undefined;

    const endMatch = new RegExp(`<!--\\s+region:${name}\\s+end\\s+-->`).exec(input);
    const end = endMatch?.index;

    if (!start || !end) {
        return input;
    }

    if (start > end) {
        throw new Error(`Markdown region ${name} ends before it starts.`);
    }

    return input.slice(0, start) + `\n${value}\n` + input.slice(end);
}
